[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "Note\n\n\n\nI deleted the unused Class notes & Links tabs. *"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(vroom)\n\n#&gt; \n#&gt; Attaching package: 'vroom'\n#&gt; \n#&gt; The following objects are masked from 'package:readr':\n#&gt; \n#&gt;     as.col_spec, col_character, col_date, col_datetime, col_double,\n#&gt;     col_factor, col_guess, col_integer, col_logical, col_number,\n#&gt;     col_skip, col_time, cols, cols_condense, cols_only, date_names,\n#&gt;     date_names_lang, date_names_langs, default_locale, fwf_cols,\n#&gt;     fwf_empty, fwf_positions, fwf_widths, locale, output_column,\n#&gt;     problems, spec\n\nlibrary(data.table)\n\n#&gt; \n#&gt; Attaching package: 'data.table'\n#&gt; \n#&gt; The following objects are masked from 'package:lubridate':\n#&gt; \n#&gt;     hour, isoweek, mday, minute, month, quarter, second, wday, week,\n#&gt;     yday, year\n#&gt; \n#&gt; The following objects are masked from 'package:dplyr':\n#&gt; \n#&gt;     between, first, last\n#&gt; \n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     transpose\n\n#  Specify the datatype of each column\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\n# Load the datasets\npatent_tb1 &lt;- vroom(\n  file       = '../../assets/datasets/patent.tsv', \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#&gt; Warning: The following named parsers don't match the column names: type,\n#&gt; number, country, abstract, title, kind, filename, withdrawn\n\nassignee_tb1 &lt;- vroom(\n  file       = '../../assets/datasets/assignee.tsv',\n  delim      = \"\\t\",\n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#&gt; Warning: The following named parsers don't match the column names: number,\n#&gt; country, date, abstract, title, kind, num_claims, filename, withdrawn\n\npatent_assignee_tb1 &lt;- vroom(\n  file       = '../../assets/datasets/patent_assignee.tsv',\n  delim      = \"\\t\",\n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\"))\n\n#&gt; Warning: The following named parsers don't match the column names: id, type,\n#&gt; number, country, date, abstract, title, kind, num_claims, filename, withdrawn\n\nuspc_tb1 &lt;- vroom(\n  file       = '../../assets/datasets/uspc.tsv',\n  delim      = \"\\t\",\n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")) %&gt;%\n  transform(patent_id = as.character(patent_id))\n\n#&gt; Warning: The following named parsers don't match the column names: id, type,\n#&gt; number, country, date, abstract, title, kind, num_claims, filename, withdrawn\n\n# Combine the datasets\nwrangled &lt;- assignee_tb1 %&gt;%\n  left_join(patent_assignee_tb1, by = c(\"id\" = \"assignee_id\")) %&gt;%\n  left_join(patent_tb1, by = c(\"patent_id\" = \"id\")) %&gt;%\n  left_join(uspc_tb1, by = \"patent_id\")\n\n#&gt; Warning: One or more parsing issues, call `problems()` on your data frame for details,\n#&gt; e.g.:\n#&gt;   dat &lt;- vroom(...)\n#&gt;   problems(dat)\n\n\n#&gt; Warning in left_join(., uspc_tb1, by = \"patent_id\"): Detected an unexpected many-to-many relationship between `x` and `y`.\n#&gt; ℹ Row 1 of `x` matches multiple rows in `y`.\n#&gt; ℹ Row 376875 of `y` matches multiple rows in `x`.\n#&gt; ℹ If a many-to-many relationship is expected, set `relationship =\n#&gt;   \"many-to-many\"` to silence this warning.\n\n# ----- Part - 1 ----\n\npatent_leaders &lt;- sort(table(wrangled$organization), decreasing=T)[1:10] %&gt;%\n  as.data.frame() %&gt;%\n  mutate(Var1 = Var1 %&gt;% str_to_title())\n\ntop_company &lt;- patent_leaders[1, \"Var1\"]\nnum_patents &lt;- patent_leaders[1, \"Freq\"]\n\nprint(paste0(top_company, \" had the most patents in 2014 with \", num_patents, \" patents.\"))\n\n#&gt; [1] \"International Business Machines Corporation had the most patents in 2014 with 20669 patents.\"\n\ndata.table(\n  \"Organization (US)\" = patent_leaders$Var1,\n  \"Number of patents (2014)\" = patent_leaders$Freq)\n\n\n\n  \n\n\n# ----- Part - 2 ----\n\nwrangled_august &lt;- wrangled %&gt;%\n  select(organization, date) %&gt;%\n  filter(date &gt;= \"2014-08-01\" & date &lt;= \"2014-08-31\")\n\npatent_leaders_august &lt;- sort(table(wrangled_august$organization), decreasing=T)[1:10] %&gt;%\n  as.data.frame() %&gt;%\n  mutate(Var1 = Var1 %&gt;% str_to_title())\n\ntop_company_aug &lt;- patent_leaders_august[1, \"Var1\"]\nnum_patents_aug &lt;- patent_leaders_august[1, \"Freq\"]\n\nprint(paste0(top_company_aug, \" had the most patents in August 2014 with \", num_patents_aug, \" patents.\"))\n\n#&gt; [1] \"International Business Machines Corporation had the most patents in August 2014 with 1990 patents.\"\n\ndata.table(\n  \"Organization (US)\" = patent_leaders_august$Var1,\n  \"Number of patents (August 2014)\" = patent_leaders_august$Freq)\n\n\n\n  \n\n\n# ----- Part - 3 ----\n\nwrangled_class &lt;- wrangled %&gt;%\n  select(organization, mainclass_id) %&gt;%\n  filter(organization %in% patent_leaders$Var1[1:10]) %&gt;%\n  subset(mainclass_id != \"No longer published\")\n\nclass_leaders &lt;- sort(table(wrangled_class$mainclass_id), decreasing=T)[1:5] %&gt;%\n  as.data.frame() \n\ntop_sector &lt;- class_leaders[1, \"Var1\"]\nnum_patents_sector &lt;- class_leaders[1, \"Freq\"]\n\nprint(paste0(top_sector, \"(ACTIVE SOLID-STATE DEVICES) was the most innovative sector in 2014 with \", num_patents_sector, \" patents.\"))\n\n#&gt; [1] \"257(ACTIVE SOLID-STATE DEVICES) was the most innovative sector in 2014 with 7710 patents.\"\n\n# According to https://www.uspto.gov/web/patents/classification/uspc257/defs257.htm#:~:text=Class%20Definition%20for%20Class%20257,TRANSISTORS%2C%20SOLID%2DSTATE%20DIODES)\ndata.table(\n  \"USPTO tech main class codes for top 10 companies (in the US?)\" = class_leaders$Var1,\n  \"Number of patents (2014)\" = class_leaders$Freq)"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(lubridate)\n\n# Load the dataset\nbike_orderlines_wrangled_tbl &lt;- read_rds('../../assets/datasets/bike_orderlines_wrangled_tbl.rds')\n\n#---- Part-1 ----\n\n# Extract state and city\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  separate(col = location, into = c(\"city\", \"state\"), sep = \", \")\n\n# Calculate sales by state\nsales_by_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  group_by(state) %&gt;%\n  summarize(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \" €\"))\n\n# Get the state with the highest revenue\nhighest_revenue_state &lt;- sales_by_state_tbl %&gt;%\n  arrange(desc(sales)) %&gt;%\n  slice(1)\nprint(highest_revenue_state)\n\n#&gt; # A tibble: 1 × 3\n#&gt;   state                     sales sales_text  \n#&gt;   &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;       \n#&gt; 1 North Rhine-Westphalia 21200613 21.200.613 €\n\n# Bar plot of sales by state\nsales_by_state_tbl %&gt;%\n  ggplot(aes(x = state, y = sales, fill = state)) +\n  geom_col() +   \n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\",\n                                                    decimal.mark = \",\",\n                                                    prefix = \"\",\n                                                    suffix = \" €\")) +\n  labs(title = \"Revenue by State\",\n       x = \"State\",\n       y = \"Sales\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n\n\n\n\n\nggsave(\"../../assets/img/tidyverse_1.png\", width = 15, height = 10, units = \"in\", dpi = 300) \n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(lubridate)\n#---- Part-2 ----\n\n# Calculate sales by state and year\nsales_by_state_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  group_by(state, year = year(order_date)) %&gt;%\n  summarize(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'state'. You can override using the\n#&gt; `.groups` argument.\n\n# Faceted bar plot of sales by state and year\nsales_by_state_year_tbl %&gt;%\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  geom_col() +\n  facet_wrap(~ state) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\",\n                                                    decimal.mark = \",\",\n                                                    prefix = \"\",\n                                                    suffix = \" €\")) +\n  labs(title = \"Revenue by State & Year\",\n       x = \"Year\",\n       y = \"Sales\") +\n  facet_wrap(~ state, ncol = 3) +   # Create 12 facets (4 rows x 3 columns)\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n\n\n\n\n\n# Save the plot\nggsave(\"../../assets/img/tidyverse_2.png\", width = 15, height = 10, units = \"in\", dpi = 300)"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(ROpenWeatherMap)\nlibrary(tidyverse)\nlibrary(lubridate) \nlibrary(glue)\nlibrary(rvest)\n\n#---- Part-1 ----\n\nAPI_KEY &lt;- Sys.getenv(\"API_KEY\")\n\ncurrent_weather &lt;- get_current_weather(API_KEY, city = \"Hamburg\")\n\nweather_data &lt;- tibble(timestamp = as_datetime(current_weather$dt),           # Timestamp of data\n                       city = current_weather$name,                           # City name\n                       country = current_weather$sys$country,                 # Country code\n                       longitude = current_weather$coord$lon,                 # Longitude\n                       latitude = current_weather$coord$lat,                  # Latitude\n                       weather_main = current_weather$weather$main,           # Main weather condition (e.g., \"Clouds\")\n                       weather_description = current_weather$weather$description, # Detailed description (e.g., \"overcast clouds\")\n                       temperature = current_weather$main$temp - 273.15,       # Temperature in Celsius\n                       feels_like = current_weather$main$feels_like - 273.15,  # Feels like temperature in Celsius\n                       temp_min = current_weather$main$temp_min - 273.15,     # Minimum temperature in Celsius\n                       temp_max = current_weather$main$temp_max - 273.15,     # Maximum temperature in Celsius\n                       pressure = current_weather$main$pressure,             # Atmospheric pressure\n                       humidity = current_weather$main$humidity,             # Humidity percentage\n                       wind_speed = current_weather$wind$speed,              # Wind speed\n                       wind_deg = current_weather$wind$deg                   # Wind direction (degrees)\n)\n\nglimpse(weather_data)\n\n#&gt; Rows: 1\n#&gt; Columns: 15\n#&gt; $ timestamp           &lt;dttm&gt; 2024-05-12 12:58:55\n#&gt; $ city                &lt;chr&gt; \"Hamburg\"\n#&gt; $ country             &lt;chr&gt; \"DE\"\n#&gt; $ longitude           &lt;int&gt; 10\n#&gt; $ latitude            &lt;dbl&gt; 53.55\n#&gt; $ weather_main        &lt;chr&gt; \"Clouds\"\n#&gt; $ weather_description &lt;chr&gt; \"broken clouds\"\n#&gt; $ temperature         &lt;dbl&gt; 19.4\n#&gt; $ feels_like          &lt;dbl&gt; 18.75\n#&gt; $ temp_min            &lt;dbl&gt; 17.92\n#&gt; $ temp_max            &lt;dbl&gt; 21.83\n#&gt; $ pressure            &lt;int&gt; 1021\n#&gt; $ humidity            &lt;int&gt; 52\n#&gt; $ wind_speed          &lt;dbl&gt; 6.17\n#&gt; $ wind_deg            &lt;int&gt; 100\n\n#---- Part-2 ----\n\n# Load the main page\nurl_home &lt;- \"https://www.rosebikes.de/fahrräder\"\nhtml_home &lt;- read_html(url_home)\n\n# Go to catalog\nbike_categories &lt;- html_home %&gt;%\n  html_nodes(css = \".catalog-navigation__link\")\n\n# Get all the links for each category\nlinks &lt;- sapply(bike_categories, function(x) {x %&gt;% html_attr(\"href\")})\n\nlinks &lt;- links %&gt;%\n  enframe(name = \"position\", value = \"subdirectory\") %&gt;%\n  mutate(\n    url = glue(\"https://www.rosebikes.de{subdirectory}\"))  %&gt;%\n  distinct(url)\n\n# For the given url , locate all the products by title and scrape their information\nscrape_data &lt;- function(url) {\n  html_bike_cat &lt;- read_html(url)\n  listings &lt;- html_nodes(html_bike_cat, css = '.catalog-category-bikes__price-title') %&gt;% \n    html_text(trim=TRUE) %&gt;%              \n    str_replace_all(\" \",\"\") %&gt;%\n    str_replace_all(\"ab\", \"\") %&gt;%\n    str_replace_all(\"€\", \"\") %&gt;%\n    str_replace_all(\"\\n\", \"\") %&gt;%\n    str_replace_all(\"\\\\.\", \"\") %&gt;%\n    str_replace_all(\",\", \"\\\\.\") %&gt;%\n    iconv('utf-8', 'ascii', sub='') %&gt;%\n    as.numeric()\n  \n  names &lt;- html_nodes(html_bike_cat, xpath = '//basic-headline/h4') %&gt;% \n    html_text() %&gt;%\n    str_replace_all(\"\\n\", \"\") %&gt;%\n    str_to_title()\n  \n  categories &lt;- rep(url %&gt;% str_replace_all(\"https://www.rosebikes.de/fahrräder/\", \"\"), \n                    each=length(names)) %&gt;%\n    str_to_title()\n  \n  return(list(\"prices\" = listings, \"names\" = names, \"categories\" = categories))\n}\n\n# Initiate the dataframe\nrosebikes_df &lt;- tibble()\n\nfor (url in links$url) {\n  data &lt;- scrape_data(url) \n  rosebikes_df &lt;- bind_rows(rosebikes_df, data) \n}\n\nhead(rosebikes_df, 10)\n\n\n\n  \n\n\n# Check if any prices are unusually high or low \nunreasonable_prices &lt;- rosebikes_df %&gt;% \n  filter(prices &lt; 100 | prices &gt; 5000) # \nprint(unreasonable_prices)\n\n#&gt; # A tibble: 3 × 3\n#&gt;   prices names                      categories\n#&gt;    &lt;dbl&gt; &lt;chr&gt;                      &lt;chr&gt;     \n#&gt; 1   8999 Xlite Unltd                Rennrad   \n#&gt; 2   8999 Xlite Unltd Kittel Edition Rennrad   \n#&gt; 3   5499 Mayor Plus                 E-Bike\n\n#Save the dataframe\nrosebikes_df %&gt;% \n  write_rds(\"../../assets/datasets/rosebikes_df.rds\")"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(glue)\n\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 397543 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# ---- Challenge - 1 ----\n\nworldwide_cases &lt;- covid_data_tbl %&gt;%\n  select(continent, date, total_cases) %&gt;%\n  drop_na(continent) %&gt;%\n  group_by(date, continent) %&gt;%\n  summarise(Total = sum(total_cases, na.rm = TRUE))\n\n#&gt; `summarise()` has grouped output by 'date'. You can override using the\n#&gt; `.groups` argument.\n\ndata_max &lt;- worldwide_cases %&gt;% \n  group_by(continent) %&gt;%\n  filter(Total == max(Total))\n\nlast_date &lt;- as.character(tail(worldwide_cases, n=1)$date)\n\nworldwide_cases %&gt;% ggplot(aes(as.Date(date), Total, color = continent)) +\n  geom_line(linewidth = 1) +\n  theme_linedraw() +\n  scale_x_date(date_labels = \"%B %y\", \n               date_breaks = \"1 month\", \n               expand = c(0,NA)) +\n  labs(\n    title = \"COVID-19 confirmed cases worldwide\",\n    subtitle = glue(\"As of {last_date}\")\n  ) +\n  xlab(\"Date\") + ylab(\"Cumulative Cases\") +\n  scale_y_continuous(labels = label_number(suffix = \" M\", scale = 1e-6)) +\n  theme(legend.title = element_blank(), \n        legend.position = \"bottom\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\nggsave(\"../../assets/img/data_vis_1.png\", width = 15, height = 10, units = \"in\", dpi = 300)\n\n\n\n\n\n\n# ---- Challenge - 2 ----\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(glue)\n\nworld &lt;- map_data(\"world\")\n\nworldwide_mortality &lt;- covid_data_tbl %&gt;%\n  select(location, date, total_deaths, population) %&gt;%\n  drop_na(location) %&gt;%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location )) %&gt;% \n  distinct() %&gt;%\n  group_by(location) %&gt;% \n  filter(date == max(date)) %&gt;%\n  mutate(death_rate = total_deaths / population) %&gt;%\n  rename(region = location) %&gt;%\n  left_join(world, by = \"region\")\n\nworldwide_mortality %&gt;% ggplot(aes(x = long, y = lat, group = group)) + \n  geom_polygon(aes(fill = death_rate), color = \"white\") +\n  labs(\n    title = \"Mortality Rate Around the World (deaths / population)\",\n    fill = \"Mortality Rate\"\n  ) +\n  theme(axis.line = element_blank(), axis.text = element_blank(),\n        axis.ticks = element_blank(), axis.title = element_blank()) +\n  scale_fill_gradientn(na.value=\"gray\",\n                       colors = rev(colorRampPalette(c(\"black\", \"lightcoral\"))(5)))\n\n\n\n\n\n\nggsave(\"../../assets/img/data_vis_2.png\", width = 15, height = 10, units = \"in\", dpi = 300)"
  }
]