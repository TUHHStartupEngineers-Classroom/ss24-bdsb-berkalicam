[
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "library(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(lubridate)\n\n# Load the dataset\nbike_orderlines_wrangled_tbl &lt;- read_rds('../../assets/datasets/bike_orderlines_wrangled_tbl.rds')\n\n#---- Part-1 ----\n\n# Extract state and city\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  separate(col = location, into = c(\"city\", \"state\"), sep = \", \")\n\n# Calculate sales by state\nsales_by_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  group_by(state) %&gt;%\n  summarize(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \" €\"))\n\n# Get the state with the highest revenue\nhighest_revenue_state &lt;- sales_by_state_tbl %&gt;%\n  arrange(desc(sales)) %&gt;%\n  slice(1)\nprint(highest_revenue_state)\n\n#&gt; # A tibble: 1 × 3\n#&gt;   state                     sales sales_text  \n#&gt;   &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;       \n#&gt; 1 North Rhine-Westphalia 21200613 21.200.613 €\n\n# Bar plot of sales by state\nsales_by_state_tbl %&gt;%\n  ggplot(aes(x = state, y = sales, fill = state)) +\n  geom_col() +   \n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\",\n                                                    decimal.mark = \",\",\n                                                    prefix = \"\",\n                                                    suffix = \" €\")) +\n  labs(title = \"Revenue by State\",\n       x = \"State\",\n       y = \"Sales\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n\n\n\n\n\n#---- Part-2 ----\n\n# Calculate sales by state and year\nsales_by_state_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  group_by(state, year = year(order_date)) %&gt;%\n  summarize(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'state'. You can override using the\n#&gt; `.groups` argument.\n\n# Faceted bar plot of sales by state and year\nsales_by_state_year_tbl %&gt;%\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  geom_col() +\n  facet_wrap(~ state) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\",\n                                                    decimal.mark = \",\",\n                                                    prefix = \"\",\n                                                    suffix = \" €\")) +\n  labs(title = \"Revenue by State & Year\",\n       x = \"Year\",\n       y = \"Sales\") +\n  facet_wrap(~ state, ncol = 3) +   # Create 12 facets (4 rows x 3 columns)\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(ROpenWeatherMap)\nlibrary(tidyverse)\nlibrary(lubridate) \nlibrary(glue)\nlibrary(rvest)\n\n#---- Part-1 ----\n\nAPI_KEY &lt;- Sys.getenv(\"API_KEY\")\n\ncurrent_weather &lt;- get_current_weather(API_KEY, city = \"Hamburg\")\n\nweather_data &lt;- tibble(timestamp = as_datetime(current_weather$dt),           # Timestamp of data\n                       city = current_weather$name,                           # City name\n                       country = current_weather$sys$country,                 # Country code\n                       longitude = current_weather$coord$lon,                 # Longitude\n                       latitude = current_weather$coord$lat,                  # Latitude\n                       weather_main = current_weather$weather$main,           # Main weather condition (e.g., \"Clouds\")\n                       weather_description = current_weather$weather$description, # Detailed description (e.g., \"overcast clouds\")\n                       temperature = current_weather$main$temp - 273.15,       # Temperature in Celsius\n                       feels_like = current_weather$main$feels_like - 273.15,  # Feels like temperature in Celsius\n                       temp_min = current_weather$main$temp_min - 273.15,     # Minimum temperature in Celsius\n                       temp_max = current_weather$main$temp_max - 273.15,     # Maximum temperature in Celsius\n                       pressure = current_weather$main$pressure,             # Atmospheric pressure\n                       humidity = current_weather$main$humidity,             # Humidity percentage\n                       wind_speed = current_weather$wind$speed,              # Wind speed\n                       wind_deg = current_weather$wind$deg                   # Wind direction (degrees)\n)\n\nglimpse(weather_data)\n\n#&gt; Rows: 1\n#&gt; Columns: 15\n#&gt; $ timestamp           &lt;dttm&gt; 2024-05-12 12:58:55\n#&gt; $ city                &lt;chr&gt; \"Hamburg\"\n#&gt; $ country             &lt;chr&gt; \"DE\"\n#&gt; $ longitude           &lt;int&gt; 10\n#&gt; $ latitude            &lt;dbl&gt; 53.55\n#&gt; $ weather_main        &lt;chr&gt; \"Clouds\"\n#&gt; $ weather_description &lt;chr&gt; \"broken clouds\"\n#&gt; $ temperature         &lt;dbl&gt; 19.4\n#&gt; $ feels_like          &lt;dbl&gt; 18.75\n#&gt; $ temp_min            &lt;dbl&gt; 17.92\n#&gt; $ temp_max            &lt;dbl&gt; 21.83\n#&gt; $ pressure            &lt;int&gt; 1021\n#&gt; $ humidity            &lt;int&gt; 52\n#&gt; $ wind_speed          &lt;dbl&gt; 6.17\n#&gt; $ wind_deg            &lt;int&gt; 100\n\n#---- Part-2 ----\n\n# Load the main page\nurl_home &lt;- \"https://www.rosebikes.de/fahrräder\"\nhtml_home &lt;- read_html(url_home)\n\n# Go to catalog\nbike_categories &lt;- html_home %&gt;%\n  html_nodes(css = \".catalog-navigation__link\")\n\n# Get all the links for each category\nlinks &lt;- sapply(bike_categories, function(x) {x %&gt;% html_attr(\"href\")})\n\nlinks &lt;- links %&gt;%\n  enframe(name = \"position\", value = \"subdirectory\") %&gt;%\n  mutate(\n    url = glue(\"https://www.rosebikes.de{subdirectory}\"))  %&gt;%\n  distinct(url)\n\n# For the given url , locate all the products by title and scrape their information\nscrape_data &lt;- function(url) {\n  html_bike_cat &lt;- read_html(url)\n  listings &lt;- html_nodes(html_bike_cat, css = '.catalog-category-bikes__price-title') %&gt;% \n    html_text(trim=TRUE) %&gt;%              \n    str_replace_all(\" \",\"\") %&gt;%\n    str_replace_all(\"ab\", \"\") %&gt;%\n    str_replace_all(\"€\", \"\") %&gt;%\n    str_replace_all(\"\\n\", \"\") %&gt;%\n    str_replace_all(\"\\\\.\", \"\") %&gt;%\n    str_replace_all(\",\", \"\\\\.\") %&gt;%\n    iconv('utf-8', 'ascii', sub='') %&gt;%\n    as.numeric()\n  \n  names &lt;- html_nodes(html_bike_cat, xpath = '//basic-headline/h4') %&gt;% \n    html_text() %&gt;%\n    str_replace_all(\"\\n\", \"\") %&gt;%\n    str_to_title()\n  \n  categories &lt;- rep(url %&gt;% str_replace_all(\"https://www.rosebikes.de/fahrräder/\", \"\"), \n                    each=length(names)) %&gt;%\n    str_to_title()\n  \n  return(list(\"prices\" = listings, \"names\" = names, \"categories\" = categories))\n}\n\n# Initiate the dataframe\nrosebikes_df &lt;- tibble()\n\nfor (url in links$url) {\n  data &lt;- scrape_data(url) \n  rosebikes_df &lt;- bind_rows(rosebikes_df, data) \n}\n\nhead(rosebikes_df, 10)\n\n\n\n  \n\n\n# Check if any prices are unusually high or low \nunreasonable_prices &lt;- rosebikes_df %&gt;% \n  filter(prices &lt; 100 | prices &gt; 5000) # \nprint(unreasonable_prices)\n\n#&gt; # A tibble: 3 × 3\n#&gt;   prices names                      categories\n#&gt;    &lt;dbl&gt; &lt;chr&gt;                      &lt;chr&gt;     \n#&gt; 1   8999 Xlite Unltd                Rennrad   \n#&gt; 2   8999 Xlite Unltd Kittel Edition Rennrad   \n#&gt; 3   5499 Mayor Plus                 E-Bike\n\n#Save the dataframe\nrosebikes_df %&gt;% \n  write_rds(\"../../assets/datasets/rosebikes_df.rds\")"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  }
]